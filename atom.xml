<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenRan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aircjm.github.io/"/>
  <updated>2020-01-21T03:12:55.427Z</updated>
  <id>https://aircjm.github.io/</id>
  
  <author>
    <name>chen ran</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>curl wget 不验证证书进行https请求</title>
    <link href="https://aircjm.github.io/2020/01/21/curl%20wget%20%E4%B8%8D%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6%E8%BF%9B%E8%A1%8Chttps%E8%AF%B7%E6%B1%82/"/>
    <id>https://aircjm.github.io/2020/01/21/curl%20wget%20%E4%B8%8D%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6%E8%BF%9B%E8%A1%8Chttps%E8%AF%B7%E6%B1%82/</id>
    <published>2020-01-21T03:07:00.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>运维给我们服务部署的时候,https证书安错了，导致浏览器可以通过访问（强制忽略https验证）<br>但是通过curl wget 无法访问，直接报错，对应的证书出错</p><p>又比较急调用接口，这个怎么办呢？？</p><p>可以通过参数忽略校验https</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget 'https://domain.com/get' --no-check-certificate</span><br><span class="line"></span><br><span class="line">curl 'https://domain.com/get' -k</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运维给我们服务部署的时候,https证书安错了，导致浏览器可以通过访问（强制忽略https验证）&lt;br&gt;但是通过curl wget 无法访问，直接报错，对应的证书出错&lt;/p&gt;
&lt;p&gt;又比较急调用接口，这个怎么办呢？？&lt;/p&gt;
&lt;p&gt;可以通过参数忽略校验https&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="curl" scheme="https://aircjm.github.io/tags/curl/"/>
    
      <category term="wget" scheme="https://aircjm.github.io/tags/wget/"/>
    
      <category term="ssh" scheme="https://aircjm.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>how to use Mybatis generator base in Maven</title>
    <link href="https://aircjm.github.io/2017/03/13/how-to-use-Mybatis-generator-base-in-Maven/"/>
    <id>https://aircjm.github.io/2017/03/13/how-to-use-Mybatis-generator-base-in-Maven/</id>
    <published>2017-03-13T03:11:05.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis属于半自动ORM，在使用这个框架中，工作量最大的就是书写Mapping的映射文件，由于手动书写很容易出错，我们可以利用Mybatis-Generator来帮我们自动生成文件。</p><a id="more"></a><p>需要配置pom.xml文件在plugins中加入以下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis-generator插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;!-- 数据库驱动  --&gt;</span><br><span class="line">&lt;!--直接在这里配置相应的数据库驱动文件--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.35&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>现在为该plugin加入配置文件，在<code>src/main/resources</code>下面加入两个配置文件，<br>一个为<code>dbconfig.properties</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#Oracle的配置</span><br><span class="line">#hibernate.dialect=org.hibernate.dialect.OracleDialect</span><br><span class="line">#jdbc.driver=oracle.jdbc.driver.OracleDriver</span><br><span class="line">#validationQuery=SELECT 1 FROM DUAL</span><br><span class="line">#jdbc.url=jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">#jdbc.username=scott</span><br><span class="line">#jdbc.password=oracle</span><br><span class="line"></span><br><span class="line">#mysql的配置</span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/fsi?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#直接修改这里的配置，指定生成的model，dao和mapper文件的位置</span><br><span class="line">model.<span class="keyword">package</span>=cjm.mybaits.model</span><br><span class="line">dao.<span class="keyword">package</span>=cjm.mybaits.dao</span><br><span class="line">xml.mapper.<span class="keyword">package</span>=cjm.mybaits.dao</span><br><span class="line"></span><br><span class="line">target.project=src/main/java</span><br></pre></td></tr></table></figure></p><p>一个为<code>generatorConfig.xml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 配置文件路径 --&gt;</span><br><span class="line">    &lt;properties resource=<span class="string">"dbconfig.properties"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--数据库驱动包路径 已经在Maven的pom配置过了，这里就不需要了--&gt;</span><br><span class="line">    &lt;!--&lt;classPathEntry location=<span class="string">"$&#123;drive.class.path&#125;"</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=<span class="string">"MySQLTables"</span> targetRuntime=<span class="string">"MyBatis3Simple"</span>&gt;</span><br><span class="line">        &lt;!--关闭注释 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=<span class="string">"suppressDate"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 <span class="keyword">true</span>：是 ： <span class="keyword">false</span>:否 --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"suppressAllComments"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接信息 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=<span class="string">"$&#123;jdbc.driver&#125;"</span> connectionURL=<span class="string">"$&#123;jdbc.url&#125;"</span> userId=<span class="string">"$&#123;jdbc.username&#125;"</span></span><br><span class="line">                        password=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        默认<span class="keyword">false</span>，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span><br><span class="line">            <span class="keyword">true</span>，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=<span class="string">"forceBigDecimals"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--生成的model 包路径 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=<span class="string">"$&#123;model.package&#125;"</span> targetProject=<span class="string">"$&#123;target.project&#125;"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"trimStrings"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成xml mapper文件 路径 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=<span class="string">"$&#123;xml.mapper.package&#125;"</span> targetProject=<span class="string">"$&#123;target.project&#125;"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成的Dao接口 的包路径 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=<span class="string">"XMLMAPPER"</span> targetPackage=<span class="string">"$&#123;dao.package&#125;"</span> targetProject=<span class="string">"$&#123;target.project&#125;"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--对应数据库表名 --&gt;</span><br><span class="line">        &lt;table schema="fsi" tableName="school"&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>dbconfig.properties</code>文件中，修改数据库连接的配置和生成实体文件的配置，然后在<code>generatorConfig.xml</code>里面只需要添加对应的<code>table</code>属性</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-1a797411ae0035dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tables.png"></p><p>执行<code>mvn mybatis-generator:generate</code> 命令就可以生成对应的实体和mapper文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-607c7b369d23bc04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eclipse执行maven命令.png"></p><p>生成示例如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-f213108eab3a04cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果.png"><br>这样的方法适用于直接部署在项目中，生成的文件直接就是在项目中，非常方便，不需要挪来挪去。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis属于半自动ORM，在使用这个框架中，工作量最大的就是书写Mapping的映射文件，由于手动书写很容易出错，我们可以利用Mybatis-Generator来帮我们自动生成文件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://aircjm.github.io/tags/java/"/>
    
      <category term="Mybatis" scheme="https://aircjm.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>【教程】在mac平台下面使用iterm2进行sz和rz命令进行远程服务器文件的上传下载功能</title>
    <link href="https://aircjm.github.io/2017/02/13/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%9C%A8mac%E5%B9%B3%E5%8F%B0%E4%B8%8B%E9%9D%A2%E4%BD%BF%E7%94%A8iterm2%E8%BF%9B%E8%A1%8Csz%E5%92%8Crz%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
    <id>https://aircjm.github.io/2017/02/13/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%9C%A8mac%E5%B9%B3%E5%8F%B0%E4%B8%8B%E9%9D%A2%E4%BD%BF%E7%94%A8iterm2%E8%BF%9B%E8%A1%8Csz%E5%92%8Crz%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/</id>
    <published>2017-02-13T06:55:37.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows下面使用xshell时，经常使用sz命令进行文件的上传下载非常方便。<br>但是在mac下面就不能直接使用了需要进行配置才能使用这么方便的功能。<br><a id="more"></a></p><h2 id="在mac电脑上安装lrzsz"><a href="#在mac电脑上安装lrzsz" class="headerlink" title="在mac电脑上安装lrzsz"></a>在mac电脑上安装lrzsz</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure><p>安装好了之后，需要进行配置了。</p><h2 id="配置iterm2属性"><a href="#配置iterm2属性" class="headerlink" title="配置iterm2属性"></a>配置iterm2属性</h2><p>拉取 <a href="https://github.com/mmastrac/iterm2-zmodem" target="_blank" rel="noopener">https://github.com/mmastrac/iterm2-zmodem</a> 两个sh文件，将他们拷贝到/usr/local/bin文件夹中。</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-17a759d3753f0935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github图片"></p><p>按照Setup的指南，在<br>Perfences的Profiles标签页的Advanced标签页下面，编辑Triggers</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-6beca6dbbca1e483.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iterm2图片"></p><p>设置为这样（这些参数参考github上面的README文件）：<br><img src="http://upload-images.jianshu.io/upload_images/1013655-9e70f4a081453fa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Triggers设置"></p><p>在远程服务器上也安装好lrzsz就可以愉快的使用sz和rz命令了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure></p><p>大功告成。</p><p>该文章可以看做是github上面README的翻译版本。</p><ol><li>Install lrzsz on OSX: brew install lrzsz</li><li>Save the iterm2-send-zmodem.sh and iterm2-recv-zmodem.sh scripts in /usr/local/bin/</li><li>Set up Triggers in iTerm 2 like so:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Regular expression: rz waiting to receive.\*\*B0100</span><br><span class="line">    Action: Run Silent Coprocess</span><br><span class="line">    Parameters: /usr/local/bin/iterm2-send-zmodem.sh</span><br><span class="line">    Instant: checked</span><br><span class="line"></span><br><span class="line">    Regular expression: \*\*B00000000000000</span><br><span class="line">    Action: Run Silent Coprocess</span><br><span class="line">    Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</span><br><span class="line">    Instant: checked</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="http://www.tuicool.com/articles/EvemMfr" target="_blank" rel="noopener">http://www.tuicool.com/articles/EvemMfr</a><br><a href="https://github.com/mmastrac/iterm2-zmodem" target="_blank" rel="noopener">https://github.com/mmastrac/iterm2-zmodem</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows下面使用xshell时，经常使用sz命令进行文件的上传下载非常方便。&lt;br&gt;但是在mac下面就不能直接使用了需要进行配置才能使用这么方便的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://aircjm.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="https://aircjm.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="linux" scheme="https://aircjm.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux定时任务实例-shadowsocks进程停止后自动重启_linux-timer-task-instance_shadowsocks-process-automatically-restarts-after-stopping</title>
    <link href="https://aircjm.github.io/2016/10/17/linux-timer-task-instance-shadowsocks-process-automatically-restarts-after-stopping/"/>
    <id>https://aircjm.github.io/2016/10/17/linux-timer-task-instance-shadowsocks-process-automatically-restarts-after-stopping/</id>
    <published>2016-10-17T14:36:21.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>在自己128M的小内存VPS上安装了锐速和SSR，可能内存比较小的问题吧，老是用用shadowsocks的然后进程就挂了，导致无法使用，郁闷。</p><p>然后就到网上找了一些资料，通过crontab定时任务刷新的情况，使shadowsocks停止服务之后自动重启服务，避免无法使用的尴尬局面出现。<br><a id="more"></a></p><p>环境：</p><ol><li>CentOS 6.5 x86</li><li>SSR</li><li>crontab</li></ol><h3 id="创建脚本检测进程情况："><a href="#创建脚本检测进程情况：" class="headerlink" title="创建脚本检测进程情况："></a>创建脚本检测进程情况：</h3><p><code>vi monitor.sh</code></p><p>内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line">proc_name=<span class="string">"procname"</span>                            <span class="comment"># 待监控进程名</span></span><br><span class="line"></span><br><span class="line">number=`ps -ef | grep <span class="variable">$proc_name</span> | grep -v grep | wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> -eq 0 ]                            <span class="comment"># 判断进程是否存在</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        /etc/init.d/procname restart              <span class="comment"># 重启进程的命令，请相应修改</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>将<code>procname</code>换成对应的进程名称即可。</p><p>下面是替换后的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/sh</span></span><br><span class="line"></span><br><span class="line">proc_name="shadowsocks"                             # 待监控进程名</span><br><span class="line"></span><br><span class="line">number=`ps -ef | grep $proc_name | grep -v grep | wc -l`</span><br><span class="line"></span><br><span class="line">if [ $number -eq 0 ]                             # 判断进程是否存在</span><br><span class="line">then</span><br><span class="line">        /etc/init.d/shadowsocks restart               # 重启进程的命令，请相应修改</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>进程名在</p><p><code>ps -ef</code></p><p>查出的列表的<code>CMD</code>中可以找到。</p><p>命令创建好了，kill掉进程，然后通过<code>./monitor.sh</code>执行下看看有没有效果。</p><p>可能提示权限有问题。添加一下权限就好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 monitor.sh</span><br></pre></td></tr></table></figure><p>再通过<code>ps -ef</code>可以看看，服务是不是起来的。</p><h3 id="创建定时任务："><a href="#创建定时任务：" class="headerlink" title="创建定时任务："></a>创建定时任务：</h3><p>为了定时进行自动操作。我们就需要crontab的帮忙了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>加入以下内容：</p><p><code>*/1 * * * * ./monitor.sh</code></p><p>加入之后重新启动下crontab即可。</p><p><code>/etc/init.d/crond restart</code></p><p>这样的话就可以了，每分钟都会执行shell脚本，看看服务有没有挂，挂的话，会自动把服务起来的。</p><p>参考：</p><p><a href="http://kenua.blog.sohu.com/280457820.html" target="_blank" rel="noopener">http://kenua.blog.sohu.com/280457820.html</a></p><p><a href="http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html" target="_blank" rel="noopener">http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html</a></p><p><a href="http://www.tennfy.com/3517.html" target="_blank" rel="noopener">http://www.tennfy.com/3517.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在自己128M的小内存VPS上安装了锐速和SSR，可能内存比较小的问题吧，老是用用shadowsocks的然后进程就挂了，导致无法使用，郁闷。&lt;/p&gt;
&lt;p&gt;然后就到网上找了一些资料，通过crontab定时任务刷新的情况，使shadowsocks停止服务之后自动重启服务，避免无法使用的尴尬局面出现。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="教程" scheme="https://aircjm.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="shadowsocks" scheme="https://aircjm.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记 第2章 一切皆对象 Thinking_in_java_Part_2_Everything_is_an_Object</title>
    <link href="https://aircjm.github.io/2016/10/12/Thinking-in-java-Part-2-Everything-is-an-Object/"/>
    <id>https://aircjm.github.io/2016/10/12/Thinking-in-java-Part-2-Everything-is-an-Object/</id>
    <published>2016-10-12T07:04:58.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>《Thinking in java》这本书一直以来都有Java圣经的称号，可以看出这边书在Java工作者当中的心目中的地位，阅读之后必要有笔记，不然随着时间的流逝，一定会忘得一干二净。</p><p>开始分章节进行学习，实在是怕内容太多打击自己信息。</p><p>下面是第二章的笔记，第一章的笔记后面补吧，没有记已经忘得差不多了，回头重读一遍。<br>第二章的主要内容只有一个-一切皆对象。<br><a id="more"></a></p><h3 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h3><p>什么是一切皆对象，一个Java程序是由各个对象组成的，对象是Java程序的基本组成部分。<br>万事万物都可以看作是对象。一个汽车就是一个汽车对象，汽车模具就可以看作“类 ”</p><h3 id="用引用操作对象"><a href="#用引用操作对象" class="headerlink" title="用引用操作对象"></a>用引用操作对象</h3><p>操作的标识符是对象的一个reference（引用）。<br>我们不关心这个引用是否有一个对象实际和他关联。只需要知道这个引用后面有块空间和它对<br>应就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String i;</span><br></pre></td></tr></table></figure><p>这只是声明一个引用，这个引用的后面没有一个对象和他关联。她仅仅是个引用。<br>但是为了安全性考虑，一般创建一个引用的同时会对其进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>对于特殊的基本数据类型来说。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">int</span> i =<span class="number">100</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们是建议定义一个局部变量时，就进行变量初始化。避免编译时报错。<br>所以在程序中无论是声明定义一个基本类型变量，还是对象变量，最好要进行初始化，避免出<br>现问题（基本类型会有默认值影响，对象会出现空指针异常）</p><h3 id="存储数据的位置："><a href="#存储数据的位置：" class="headerlink" title="存储数据的位置："></a>存储数据的位置：</h3><h4 id="寄存器："><a href="#寄存器：" class="headerlink" title="寄存器："></a>寄存器：</h4><p>最快的存储区，在CPU内，Java无法操作该区域。</p><h4 id="堆栈："><a href="#堆栈：" class="headerlink" title="堆栈："></a>堆栈：</h4><p>很少使用，（忽略）（基本数据类型就在这个里面）</p><h4 id="堆："><a href="#堆：" class="headerlink" title="堆："></a>堆：</h4><p>存放所有的Java对象的存储区，一种通用的内存池（位于内存（RAM）中）。无线知道数据<br>的生命周期，需要一个对象时，只需要执行new指令，就可以自动在堆内进行存储分配。<br>（Java实际上无法在堆栈中直接操作对象，C++可以）<br>对于堆和堆栈来说，其实都是在内存中，但是内存管理方式不同，所以分成不同的空间进行定<br>义。</p><h4 id="常量存储："><a href="#常量存储：" class="headerlink" title="常量存储："></a>常量存储：</h4><p>字符串常量池。位于特殊的静态存储区中（一般物理设备为ROM（只读存储器））</p><h5 id="非RAM存储（例如硬盘以及其他服务器）："><a href="#非RAM存储（例如硬盘以及其他服务器）：" class="headerlink" title="非RAM存储（例如硬盘以及其他服务器）："></a>非RAM存储（例如硬盘以及其他服务器）：</h5><p>流对象（发送到另一台机器）<br>持久化对象（存储在磁盘上）</p><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>我们一般都说在Java中数据类型有两种，一种是基本类型，一种是引用类型。<br>引用类型new出来的是是将对象存储在“堆”中的，而基本类型是创建一个并非是引用的“自<br>动 ”变量，直接存储在堆栈中，更加高效。</p><h3 id="高精度数据类型："><a href="#高精度数据类型：" class="headerlink" title="高精度数据类型："></a>高精度数据类型：</h3><p>Java提供两个用于高精度计算的类： BigIngeter和BigDecimal分别对应的是int和float。高精<br>度会导致运算速度慢，典型的速度换准确度。<br>高精度数据类型主要用于进行要求精度比较高的货币计算。（财务计算使用）</p><h3 id="Java中的数组："><a href="#Java中的数组：" class="headerlink" title="Java中的数组："></a>Java中的数组：</h3><p>数组是相同数据类型的长度固定的集合。Java的数组是通过以少量的内存开销以及运行时期的<br>下标检查为代价（性能的销户），带来的是Java数组的安全性和效率的提高。</p><h3 id="Java的垃圾回收机制："><a href="#Java的垃圾回收机制：" class="headerlink" title="Java的垃圾回收机制："></a>Java的垃圾回收机制：</h3><p>之前就谈过了，new出来的对象和基本类型数据他的存储位置是不同的，一个是堆，一个是堆<br>栈，所以他们的生命周期也是不一样的。对于堆内存中的对象来说，对象不再进行引用了，就<br>会释放内存空间资源了，在Java中我们通过守护线程GC进行自动回收，避免很多内存溢出问<br>题。</p><h3 id="Java的基本类型默认值："><a href="#Java的基本类型默认值：" class="headerlink" title="Java的基本类型默认值："></a>Java的基本类型默认值：</h3><p>类的成员变量是基本数据类型它是有默认值的，所以需要确保基本类型的成员能够得到初始化，防止出错。<br>主要的基本数据类型默认值有：</p><table><thead><tr><th>基本数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>boolean</td><td>false</td></tr><tr><td>char</td><td>‘\u0000’(null)</td></tr><tr><td>int</td><td>0</td></tr><tr><td>double</td><td>0.0d</td></tr></tbody></table><h3 id="static关键字："><a href="#static关键字：" class="headerlink" title="static关键字："></a>static关键字：</h3><p>执行new来创建对象时，数据存储空间才会被分配，对象的方法才能提供外界进行调用。</p><p>当声明一个事物是static时，意味着属性或者方法不会与任何包含它的类的任何对象实例进行关联。所以不需要对象实例，也可以通过调用其static方法或者访问static域（属性）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123; </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">47</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过StaticTest类new出来两个对象，但是st1和st2的i是共享同一份存储空间的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StaticTest.i++;</span><br></pre></td></tr></table></figure><p>i++之后，st1和st2的i值是相同的。</p><p>在每个.java文件的开头，必须声明<code>import</code>语句，但是有一个特殊的包直接自动默认导入的，这个包就是<code>java.lang</code>包，所以我们可以在不使用import语句的情况下，直接使用System.out<br>等等方法。</p><h3 id="比较常用的Javadoc标签有："><a href="#比较常用的Javadoc标签有：" class="headerlink" title="比较常用的Javadoc标签有："></a>比较常用的Javadoc标签有：</h3><p><code>@Deprecated</code>:表示旧特性已经被改进的新特性进行取代，建议用户不要再使用这些旧特性，<br>可能会被删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Thinking in java》这本书一直以来都有Java圣经的称号，可以看出这边书在Java工作者当中的心目中的地位，阅读之后必要有笔记，不然随着时间的流逝，一定会忘得一干二净。&lt;/p&gt;
&lt;p&gt;开始分章节进行学习，实在是怕内容太多打击自己信息。&lt;/p&gt;
&lt;p&gt;下面是第二章的笔记，第一章的笔记后面补吧，没有记已经忘得差不多了，回头重读一遍。&lt;br&gt;第二章的主要内容只有一个-一切皆对象。&lt;br&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://aircjm.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://aircjm.github.io/tags/java/"/>
    
      <category term="note" scheme="https://aircjm.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>git_commond_list</title>
    <link href="https://aircjm.github.io/2016/09/23/git-commond-list/"/>
    <id>https://aircjm.github.io/2016/09/23/git-commond-list/</id>
    <published>2016-09-23T08:50:48.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>git可以说越来越流行了，GitHub上面有很多开源项目可供参考学习，如果git都不会用，就比较尴尬了。</p><p>git的学习其实很简单的。</p><p>下面这个伯乐在线的博文零基础教你如何使用git，希望对你的使用有帮助。</p><p><a href="http://blog.jobbole.com/78960/" target="_blank" rel="noopener">推荐！手把手教你使用Git</a></p><p>这个正常来讲，你跟着这个教程手动操作一遍，基本上对于简单的git操作就会了，但是git操作的精髓就在于使用命令行进行操作。</p><p>git的命令行有很多，我这边引用了阮一峰的博文日志，<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu" target="_blank" rel="noopener">常用 Git 命令清单</a>。有兴趣可以看下。</p><a id="more"></a><h3 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1.新建代码库"></a>1.新建代码库</h3><p>在当前目录新建一个Git代码库</p><p><code>git init</code></p><p>新建一个目录，并且将它初始化Git代码库</p><p><code>git init [project-name]</code></p><p>下载一个项目和它的整个代码历史</p><p><code>git clone [url]</code></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>Git的配置文件为.gitconfig，他可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p><p>显示当前的Git配置</p><p><code>git config --list</code></p><p>编辑Git配置文件(不怎么常用，基本上一次配置结束之后，很少会对配置进行操作)</p><p><code>git config -e [--global]</code></p><p>设置提交代码时的用户信息</p><p><code>git config [--global] user.name &quot;[name]&quot;</code></p><p><code>git config [--global] user.email &quot;[email address]&quot;</code></p><h3 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3.增加/删除文件"></a>3.增加/删除文件</h3><p> 添加指定文件到暂存区</p><p><code>git add [file1][file2] ...</code></p><p>添加指定目录到暂存区，包括子目录</p><p><code>git add [dir]</code></p><p>添加当前目录的所有文件到暂存区</p><p><code>git add .</code></p><p>删除工作区文件，并且将这次删除放入暂存区</p><p><code>git rm [file1][file2] ...</code></p><p> 停止追踪指定文件，但该文件会保留在工作区</p><p><code>git rm --cached [file]</code></p><p>改名文件，并且将这个改名放入暂存区</p><p><code>git mv [file-original][file-renamed]</code></p><h3 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h3><p>提交暂存区到仓库区</p><p><code>git commit -m [message]</code></p><p>提交暂存区的指定文件到仓库区</p><p><code>git commit [file1][file2] ... -m [message]</code></p><p>提交工作区自上次commit之后的变化，直接到仓库区</p><p><code>git commit -a</code></p><p>提交时显示所有diff信息</p><p><code>git commit -v</code></p><p>使用一次新的commit，替代上一次提交</p><p><code>git commit --amend -m [message]</code></p><p>重做上一次commit，并包括指定文件的新变化</p><p><code>git commit --amend [file1][file2] ...</code></p><h3 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h3><p>列出所有本地分支</p><p><code>git branch</code></p><p>列出所有远程分支</p><p><code>git branch -r</code></p><p>列出所有本地分支和远程分支</p><p><code>git branch -a</code></p><p>新建一个分支，但依然停留在当前分支</p><p><code>git branch [branch-name]</code></p><p>新建一个分支，并切换到该分支</p><p><code>git checkout -b [branch]</code></p><p>新建一个分支，指向指定commit</p><p><code>git branch [branch][commit]</code></p><p>新建一个分支，与指定的远程分支建立追踪关系</p><p><code>git branch --track [branch][remote-branch]</code></p><p>切换到指定分支，并更新工作区</p><p><code>git checkout [branch-name]</code></p><p>建立追踪关系，在现有分支与指定的远程分支之间</p><p><code>git branch --set-upstream [branch][remote-branch]</code></p><p>合并指定分支到当前分支</p><p><code>git merge [branch]</code></p><p>选择一个commit，合并进当前分支</p><p><code>git cherry-pick [commit]</code></p><p>删除分支</p><p><code>git branch -d [branch-name]</code></p><p>删除远程分支</p><p><code>git push origin --delete [branch-name]</code></p><p><code>git branch -dr [remote/branch]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git可以说越来越流行了，GitHub上面有很多开源项目可供参考学习，如果git都不会用，就比较尴尬了。&lt;/p&gt;
&lt;p&gt;git的学习其实很简单的。&lt;/p&gt;
&lt;p&gt;下面这个伯乐在线的博文零基础教你如何使用git，希望对你的使用有帮助。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.jobbole.com/78960/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;推荐！手把手教你使用Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个正常来讲，你跟着这个教程手动操作一遍，基本上对于简单的git操作就会了，但是git操作的精髓就在于使用命令行进行操作。&lt;/p&gt;
&lt;p&gt;git的命令行有很多，我这边引用了阮一峰的博文日志，&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;常用 Git 命令清单&lt;/a&gt;。有兴趣可以看下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="https://aircjm.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>idea 配置优化 Intellij_IDEA_configuration_optimization</title>
    <link href="https://aircjm.github.io/2016/09/21/Intellij-IDEA-configuration-optimization/"/>
    <id>https://aircjm.github.io/2016/09/21/Intellij-IDEA-configuration-optimization/</id>
    <published>2016-09-21T07:32:04.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>平时主要开发IDE使用的是Intellij IDEA 14，有的时候需要对IDE的配置进行微调，提高开发效率。<br>下面就是比较常用的修改项。</p><a id="more"></a><h3 id="项目启动不默认打开最后项目："><a href="#项目启动不默认打开最后项目：" class="headerlink" title="项目启动不默认打开最后项目："></a>项目启动不默认打开最后项目：</h3><p>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Startup/Shutdown 标签项 -&gt; 去掉 Reopen last project on startup</p><h3 id="关闭程序自动更新检查："><a href="#关闭程序自动更新检查：" class="headerlink" title="关闭程序自动更新检查："></a>关闭程序自动更新检查：</h3><p>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Updates -&gt; 去掉勾选 Automatically check updates for</p><h3 id="设置字符编码格式："><a href="#设置字符编码格式：" class="headerlink" title="设置字符编码格式："></a>设置字符编码格式：</h3><p>File -&gt; Settings -&gt; Editor -&gt; File Encodings -&gt; 设置 IDE Encoding、Project Encoding、Defalut encoding for properties files 都为 UTF-8 并且勾选 Transparent native -to-ascii conversion</p><h3 id="过滤的文件类型和目录："><a href="#过滤的文件类型和目录：" class="headerlink" title="过滤的文件类型和目录："></a>过滤的文件类型和目录：</h3><p>File -&gt; Settings -&gt; Editor -&gt; File Types -&gt; Ignore files and folders -&gt; 添加 <code>*.iml;*.idea;*.classpath;*.project;*.settings;target;</code></p><h3 id="显示代码行号和方法分割线："><a href="#显示代码行号和方法分割线：" class="headerlink" title="显示代码行号和方法分割线："></a>显示代码行号和方法分割线：</h3><p>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Apperance -&gt; 勾选 Show line numbers、Show method separators</p><p>代码折叠：</p><h3 id="有时候我们需要阅读每一行代码，所以需要让每行代码都显示"><a href="#有时候我们需要阅读每一行代码，所以需要让每行代码都显示" class="headerlink" title="有时候我们需要阅读每一行代码，所以需要让每行代码都显示"></a>有时候我们需要阅读每一行代码，所以需要让每行代码都显示</h3><p>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Folding 去除勾选 Collapse by default 中的File header Imports， One-line methods</p><p>idea import比较多的话，会自动转成*，对于开发不是很友好，所以把import调大点。</p><p>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java -&gt;  Class count to use import with ‘*’ 和  Names count to use static improt with 调到1000.</p><h3 id="Maven镜像地址修改"><a href="#Maven镜像地址修改" class="headerlink" title="Maven镜像地址修改"></a>Maven镜像地址修改</h3><p>关于maven的配置，idea中自己集成了maven的插件，可以无缝进行使用。</p><p>但是为了加快maven的速度，切换了maven的阿里云镜像</p><p>在maven的配置文件settings.xml的mirrors节点添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时主要开发IDE使用的是Intellij IDEA 14，有的时候需要对IDE的配置进行微调，提高开发效率。&lt;br&gt;下面就是比较常用的修改项。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="config" scheme="https://aircjm.github.io/tags/config/"/>
    
      <category term="idea" scheme="https://aircjm.github.io/tags/idea/"/>
    
      <category term="java" scheme="https://aircjm.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2016年6月小结</title>
    <link href="https://aircjm.github.io/2016/07/03/2016%E5%B9%B46%E6%9C%88%E5%B0%8F%E7%BB%93/"/>
    <id>https://aircjm.github.io/2016/07/03/2016%E5%B9%B46%E6%9C%88%E5%B0%8F%E7%BB%93/</id>
    <published>2016-07-03T15:18:34.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>2016年已经过去了，时光荏苒，年初的目标还没有完成，效率比较低，现实中又受到些刺激，写点东西纪念下吧，不论是学习还是生活，笔记都是很有必要的，代表的是一段段的记忆，我们现在就需要记一点人生笔记。<br><a id="more"></a><br>不提6月份完成多少目标了，也不说7月份的暂定目标是什么，有人问，那还谈个屁啊，不说过去也不说未来的。</p><p>谈一谈我搭建这个Blog的原因吧，之前是觉得好玩，在15年8月份的时候开始接触Hexo，又不用花钱,顺手就按照网上的教程搭了一个，之后陆陆续续的写过几篇文章，再之后就再也没有碰过了。</p><p>时间很快来到2016年，有天查询一些资料到一个技术blog，发现大神用的next主题的Blog很漂亮，才想起来自己那个不知道在哪个犄角旮旯的Blog，好好整理了一下，补充了一些内容，也删掉了一些内容，还有一些待完成的挂在Blog上面，就想好好写一点在上面，但是发现肚里没有什么货色，知耻而后勇，就开始了我写blog的计划。每个月要有产出，但是这个产出也要有货啊，总不能每次都发一个月度感言吧，😓</p><p>​所以需要不停的学习，补充自己才能满足需求。可能我的blog里面的内容和我文章底下的参考博文很像，有人说，不如直接去看参考博文了，干嘛还要自己写一个很类似的东西啊，虽然类似但是也是自己的一个亲身经历，之前查找一些资料，用过了之后，过了一两个月发现需要用的时候还需要去在找一次，这就没有必要了，所以有了我自己的blog，有参考大神的文章，但是我写的目的不是很高尚的说分享给某某人，造福大家，我主要的目的还是为了让自己更加熟悉和了解知识，但是如果也能帮到大家的忙，我也很高兴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年已经过去了，时光荏苒，年初的目标还没有完成，效率比较低，现实中又受到些刺激，写点东西纪念下吧，不论是学习还是生活，笔记都是很有必要的，代表的是一段段的记忆，我们现在就需要记一点人生笔记。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="2016" scheme="https://aircjm.github.io/tags/2016/"/>
    
      <category term="感想" scheme="https://aircjm.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>tomcat源码学习2-main方法</title>
    <link href="https://aircjm.github.io/2016/07/03/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A02-main%E6%96%B9%E6%B3%95/"/>
    <id>https://aircjm.github.io/2016/07/03/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A02-main%E6%96%B9%E6%B3%95/</id>
    <published>2016-07-03T10:46:15.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>环境搭建好了，将项目启动起来，就可以打断点进行调试了。看看tomcat到底是怎么启动的。</p><a id="more"></a><p>之前我们配置环境的时候就已经说了，tomcat的启动是从<code>org.apache.catalina.startup.Bootstrap</code>的<code>main</code>方法开始的。我们就看下这个main方法里面有什么玄机吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Don't set daemon until init() has completed</span></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        daemon = bootstrap;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">        <span class="comment">// thread so make sure the correct class loader is used to prevent</span></span><br><span class="line">        <span class="comment">// a range of class not found exceptions.</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String command = <span class="string">"start"</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            command = args[args.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</span><br><span class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</span><br><span class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</span><br><span class="line">            daemon.stop();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</span><br><span class="line">            daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</span><br><span class="line">            daemon.stopServer(args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==daemon.getServer()) &#123;</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            t = t.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>daemon</code>是在里面定义过的，类型也是Bootstrap类型的，值为null，流程继续往下走，执行初始化(init)方法。</p><p>我们看下初始化方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set Catalina path</span></span><br><span class="line">    setCatalinaHome();</span><br><span class="line">    setCatalinaBase();</span><br><span class="line"></span><br><span class="line">    initClassLoaders();</span><br><span class="line"></span><br><span class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</span><br><span class="line"></span><br><span class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load our startup class and call its process() method</span></span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        log.debug(<span class="string">"Loading startup class"</span>);</span><br><span class="line">    Class&lt;?&gt; startupClass =</span><br><span class="line">        catalinaLoader.loadClass</span><br><span class="line">        (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</span><br><span class="line">    Object startupInstance = startupClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the shared extensions class loader</span></span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        log.debug(<span class="string">"Setting startup class properties"</span>);</span><br><span class="line">    String methodName = <span class="string">"setParentClassLoader"</span>;</span><br><span class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</span><br><span class="line">    paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</span><br><span class="line">    Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    paramValues[<span class="number">0</span>] = sharedLoader;</span><br><span class="line">    Method method =</span><br><span class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    method.invoke(startupInstance, paramValues);</span><br><span class="line"></span><br><span class="line">    catalinaDaemon = startupInstance;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中这个方法主要干的事情我们通过源码可以了解到</p><ol><li>设置了<code>catalina.home</code>和<code>catalina.base</code>属性</li><li>初始化类的加载器（initClassLoaders），分别创建了（Class loader creation）commonLoader，catalinaLoader，sharedLoader这几个ClassLoader。</li><li>然后实例化了一个<code>org.apache.catalina.startup.Catalina</code>对象，通过反射方式调用了<code>Catalina</code>对象的<code>setParentClassLoader</code>方法。</li></ol><p>好了这个init方法就完了，其实实际上里面还是很复杂的，有时间可以研究一下，为什么这样做，有么有更好的方法实现。</p><p>继续我们可以看到默认的<code>command</code>值为<code>start</code>，开始执行<code>load</code>方法。看下load的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String[] arguments)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the load() method</span></span><br><span class="line">    String methodName = <span class="string">"load"</span>;</span><br><span class="line">    Object param[];</span><br><span class="line">    Class&lt;?&gt; paramTypes[];</span><br><span class="line">    <span class="keyword">if</span> (arguments==<span class="keyword">null</span> || arguments.length==<span class="number">0</span>) &#123;</span><br><span class="line">        paramTypes = <span class="keyword">null</span>;</span><br><span class="line">        param = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        paramTypes = <span class="keyword">new</span> Class[<span class="number">1</span>];</span><br><span class="line">        paramTypes[<span class="number">0</span>] = arguments.getClass();</span><br><span class="line">        param = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">        param[<span class="number">0</span>] = arguments;</span><br><span class="line">    &#125;</span><br><span class="line">    Method method =</span><br><span class="line">        catalinaDaemon.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        log.debug(<span class="string">"Calling startup class "</span> + method);</span><br><span class="line">    method.invoke(catalinaDaemon, param);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个里面的内容并不复杂，也是通过反射的形式调用<code>Catalina</code>类的<code>load</code>方法。</p><p>load执行完了之后，就执行start方法了。一样的内容也是通过反射调用的<code>Catalina</code>类的<code>start</code>方法。</p><p>到这里的时候，这个main方法也已经结束了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境搭建好了，将项目启动起来，就可以打断点进行调试了。看看tomcat到底是怎么启动的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="tomcat" scheme="https://aircjm.github.io/tags/tomcat/"/>
    
      <category term="源码" scheme="https://aircjm.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>tomcat源码学习1-环境搭建</title>
    <link href="https://aircjm.github.io/2016/07/02/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://aircjm.github.io/2016/07/02/tomcat%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2016-07-02T12:12:16.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建一个tomcat的源码阅读环境"><a href="#搭建一个tomcat的源码阅读环境" class="headerlink" title="搭建一个tomcat的源码阅读环境"></a>搭建一个tomcat的源码阅读环境</h1><p>受同事面试情况的影响，觉得是时候看一会源代码了，选择了最熟悉的Tomcat(现在使用最多的Servlet容器)，里面运用了很多设计模式和很好的编程思想，代码非常优秀，值得学习，并且熟悉了之后也方便以后工作中定位问题。</p><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>本机环境：</p><ol><li>操作系统版本：10.11.5版本mac os x</li><li>jdk版本：1.8.0_92</li><li>Maven 3</li><li>Tomcat7</li></ol><p>去官网下载一份Tomcat7源码<a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">tomcat7</a></p><p>选择Source Code Distributions下面的zip文件进行下载，下载好之后解压，可以看到Tomcat项目是通过Ant进行构建的，没用过这个东西（傻眼），网上找了一下，发现也可以通过maven的方式来进行管理依赖关系。</p><p>新建一个Maven的配置文件pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat7.0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tomcat7.0 src<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Tomcat7.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-apache-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.xml/jaxrpc-api --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网上那个教程不知道为什么我这边直接就报错，没有找到对应的jar包，自己去Maven找了一个，发现也是可以的。</p><p>Tomcat的启动方法是在源码下面的/java/org/apache/catalina/startup/Bootstrap.java类的main方法。</p><p>现在需要配置一个Application，点击菜单栏<code>Run</code>-<code>Edit configurations...</code>，点击加号新建配置项<code>Application</code>。</p><p>配置Main class为<code>org.apache.catalina.startup.Bootstrap</code>，网上有教程说需要配置<code>VM options</code>，不知道为什么我在我自己mac电脑上配置好之后没有办法正常使用，只有去掉才可以，还没有搞清楚原因。</p><p>配置好了之后，我们先使用Maven的compile编译下，看看有没有问题，一切OK，正常编译通过。</p><p>运行我们之前配好的Application。</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-0e9249eb7dc61195.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tomcat源码启动"></p><p>访问，<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>。熟悉的Tomcat界面表示环境搭建成功。底下就可以打断电调试Tomcat7的源码。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.jianshu.com/p/9e3f99f2d5bb" target="_blank" rel="noopener">用Intellij IDEA调试Tomcat7.0源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建一个tomcat的源码阅读环境&quot;&gt;&lt;a href=&quot;#搭建一个tomcat的源码阅读环境&quot; class=&quot;headerlink&quot; title=&quot;搭建一个tomcat的源码阅读环境&quot;&gt;&lt;/a&gt;搭建一个tomcat的源码阅读环境&lt;/h1&gt;&lt;p&gt;受同事面试情况的影响，觉得是时候看一会源代码了，选择了最熟悉的Tomcat(现在使用最多的Servlet容器)，里面运用了很多设计模式和很好的编程思想，代码非常优秀，值得学习，并且熟悉了之后也方便以后工作中定位问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="tomcat" scheme="https://aircjm.github.io/tags/tomcat/"/>
    
      <category term="源码" scheme="https://aircjm.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java 多线程</title>
    <link href="https://aircjm.github.io/2016/06/06/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://aircjm.github.io/2016/06/06/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2016-06-06T15:24:00.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>学习java多线程的一下知识的总结，写在这里，防止自己遗忘，也是为了复习。</p><a id="more"></a><h3 id="JVM的启动是单线程还是多线程的？？"><a href="#JVM的启动是单线程还是多线程的？？" class="headerlink" title="JVM的启动是单线程还是多线程的？？"></a>JVM的启动是单线程还是多线程的？？</h3><p>JVM启动的时候不仅仅启动了主线程，而且启动了垃圾回收线程，所以JVM的启动是多线程的。</p><h3 id="如何实现多线程？"><a href="#如何实现多线程？" class="headerlink" title="如何实现多线程？"></a>如何实现多线程？</h3><p>两种方式：</p><ol><li>继承Thread类<ol><li>自定义MyThread类继承了Thread类</li><li>重写MyThread类中的run()方法</li><li>创建MyThread对象</li><li>启动线程对象</li></ol></li></ol><ol><li>实现Runable接口<ol><li>自定义MyRunnable类实现了Runnable接口</li><li>重写MyRunnable类中的run()方法</li><li>创建MyRunnable对象</li><li>创建Thread对象，把MyRunnable对象对象作为构造函数的入参</li></ol></li></ol><p>对于继承Thread来说，是通过重写了<code>run</code>方法来实现的，因为一个类的代码并不是都需要多线程执行的，只会执行<code>run</code>方法里面的代码。</p><h4 id="为什么有两张方式来实现多线程？？？"><a href="#为什么有两张方式来实现多线程？？？" class="headerlink" title="为什么有两张方式来实现多线程？？？"></a>为什么有两张方式来实现多线程？？？</h4><ol><li>由于Java只支持单继承，避免单继承导致的多线程的局限性</li><li>适合多个相同程序的代码去处理同一个资源，吧线程相同程序的代码，数据有效分离，体现了Java面向对象的设计思想。</li></ol><p>如果重复调用<code>run</code>会发现，还是单线程执行，原因是<code>run</code>方法它是单行程的。</p><p>可以通过<code>start</code>方法来执行，如果调用两次<code>start</code>方法，并不能进行多线程操作，由于已经执行了<code>start</code>方法，再次执行<code>start</code>会报错,，报错信息如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1013655-0a96d1ad2c5294ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连续执行对象的线程start方法报错.png"></p><p>所以可以实例化两个对象，分别启动对象的线程，会发现他们两个确实是多线程执行的。看到两个for循环是同时执行的，并没有顺序执行。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aircjm.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aircjm.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于run()方法时单线程的，所以还是按照单线程执行，一个run()执行完了，另一个run()才会执行</span></span><br><span class="line">        <span class="comment">//myThread.run();</span></span><br><span class="line">        <span class="comment">//myThread.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通过start()方法来启动线程</span></span><br><span class="line">        <span class="comment">//两者之间的区别，start是使该线程开始执行，JVM调用该线程的run()方法</span></span><br><span class="line">        <span class="comment">//myThread.start();</span></span><br><span class="line">        <span class="comment">//myThread.start();</span></span><br><span class="line"></span><br><span class="line">        MyThread myThread1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread myThread2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何获取继承Thread的线程对象的名称"><a href="#如何获取继承Thread的线程对象的名称" class="headerlink" title="如何获取继承Thread的线程对象的名称"></a>如何获取继承Thread的线程对象的名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> <span class="comment">//获取线程的名词</span></span></span><br></pre></td></tr></table></figure><h3 id="线程控制的几个方法："><a href="#线程控制的几个方法：" class="headerlink" title="线程控制的几个方法："></a>线程控制的几个方法：</h3><p>休眠线程：<br><code>public static void sleep(long millis) throws InterruptedException</code></p><p>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。该线程不丢失任何监视器的所属权。<br>启动线程：<br>start</p><p><code>public void start()</code><br>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。<br>结果是两个线程并发地运行；当前线程（从调用返回给 start 方法）和另一个线程（执行其 run 方法）。</p><p>多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。</p><p>抛出：<br>IllegalThreadStateException - 如果线程已经启动。<br>另请参见：<br>run(), stop()<br>run</p><p><code>public void run()</code><br>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。<br>Thread 的子类应该重写该方法。</p><p>加入线程：</p><p>礼让线程：</p><p>守护线程：</p><p>中断线程：</p><h4 id="启动线程用的是哪个方法？"><a href="#启动线程用的是哪个方法？" class="headerlink" title="启动线程用的是哪个方法？"></a>启动线程用的是哪个方法？</h4><p>start()</p><h4 id="run-和start-方法的区别？"><a href="#run-和start-方法的区别？" class="headerlink" title="run()和start()方法的区别？"></a>run()和start()方法的区别？</h4><ol><li>run直接调用，调用的是普通方法</li><li>start()方法，是启动线程，然后JVM调用了run()方法</li></ol><h4 id="如何让线程安全？？"><a href="#如何让线程安全？？" class="headerlink" title="如何让线程安全？？"></a>如何让线程安全？？</h4><p>给需要线程安全的地方进行加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ticketNum = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ticketNum)&#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"now is sell "</span>+ ticketNum-- +<span class="string">" ticket"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加锁的方式有多种，可以给代码块加锁（锁对象是任意对象），可以给方法加锁（锁对象是this），也可以给静态方法加锁（锁对象是字节码文件）</p><p>学习到的线程安全的对象有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">Hashtable&lt;String, Object&gt; hashTable = <span class="keyword">new</span> Hashtable&lt;String, Object&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 即使线程安全但是也不推荐使用</span></span><br><span class="line">Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">Hashtable&lt;String, Object&gt; hashTable = <span class="keyword">new</span> Hashtable&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何使用线程安全的List呢??</span></span><br><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;()); <span class="comment">// 线程安全</span></span><br><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//线程不安全</span></span><br></pre></td></tr></table></figure><p>通过静态方法获取到线程安全的List集合</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习java多线程的一下知识的总结，写在这里，防止自己遗忘，也是为了复习。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://aircjm.github.io/tags/java/"/>
    
      <category term="笔记" scheme="https://aircjm.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java Web Study-Web Request</title>
    <link href="https://aircjm.github.io/2016/04/25/Java-Web-Study-Web-Request/"/>
    <id>https://aircjm.github.io/2016/04/25/Java-Web-Study-Web-Request/</id>
    <published>2016-04-25T14:01:01.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>Java Web 学习的相关内容<br><a id="more"></a></p><h2 id="如何发起一个HTTP请求？"><a href="#如何发起一个HTTP请求？" class="headerlink" title="如何发起一个HTTP请求？"></a>如何发起一个HTTP请求？</h2><p>发起一个HTTP请求的过程实际上就是建立一个Socket通信的过程。</p><p>浏览器在建立Socket连接之前，必须根据地址栏里面输入的URL的域名DNS服务器，解析出对应的IP地址，例如<code>aircjm.me</code>这个域名通过DnsPod的DNS服务器就会解析到对应的github或者是coding的服务器ip地址，的再根据这个IP地址和默认的端口号80与远程服务器建立<code>Socket</code>连接，然后浏览器通过这个URL组装成一个get类型的HTTP请求，通过<code>outputStream.write</code>发送到服务器，服务器等待<code>inputStream.read</code>返回数据，最后断开这个链接。</p><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">访问成功</td></tr><tr><td style="text-align:center">302</td><td style="text-align:center">临时跳转，跳转的地址通过Location指定</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">客户端请求语法错误，不能被服务器识别</td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">服务器收到请求，但是拒绝提供服务</td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">请求的资源不存在</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">服务器发生不可预期的错误</td></tr></tbody></table><p>缓存机制的几个属性：</p><p><code>Cache-Control/Pargma:no-cache</code> ：所有内容不会被缓存，在请求头和响应头中设置。</p><p><code>Expires: Sat, 25 Feb 2012 10:22:11 GMT</code> 后面跟着一个日期和时间，超过这个时间缓存会失效。</p><p><code>Last-Modiried/Etag</code> 表示一个服务器上资源最后修改时间，通过这个最后修改时间可以判断当前请求的资源是否是最新的。</p><p>域名的几种解析方式：</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">A记录</td><td style="text-align:center">Address,用来指定域名对应的IP地址</td></tr><tr><td style="text-align:center">MX记录</td><td style="text-align:center">Mail Exchange,解析某个域名下的邮件服务器到自己的Mail Server</td></tr><tr><td style="text-align:center">CNAME记录</td><td style="text-align:center">Canonical Name（别名解析）为一个域名设置多个别名</td></tr><tr><td style="text-align:center">NS记录</td><td style="text-align:center">为某个域名指定DNS解析服务器</td></tr><tr><td style="text-align:center">TXT记录</td><td style="text-align:center">为某个主机名或者域名设置说明</td></tr></tbody></table><p>CND工作机制：</p><p>通过镜像+缓存+整体负载均衡使得Content Delivery Network（内容分布网络）可以让用户更快的获得网络资源，提供用户访问网络的响应速度。</p><p>负载均衡：</p><p>就是对工作任务进行平衡、分摊到多个操作单元上执行，共同完成任务，对应用户来说，是一个服务器在处理任务，但是实际上是很多服务器组成一个集进行进行数据的处理。避免软件或者硬件的失效，导致任务或者请求的堵塞，和访问速度的一致性。</p><p>负载均衡的分类：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">硬件负载均衡</td><td style="text-align:center">性能好，价钱贵，不能动态扩容</td></tr><tr><td style="text-align:center">软件负载均衡</td><td style="text-align:center">成本低，多次代理，增加网络延迟</td></tr><tr><td style="text-align:center">链路负载均衡</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">操作系统负载均衡</td></tr></tbody></table><p>​    </p><p>CDN动态加速：</p><p>通过动态的链路探测在CDN的DNS解析寻找回源最好的一条线路，将请求调度到选定的这条路径进行回源，从而加快网络访问速度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java Web 学习的相关内容&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>(macbook配置开发环境)MacBook configure the development environment</title>
    <link href="https://aircjm.github.io/2016/04/22/macbook%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-MacBook-configure-the-development-environment/"/>
    <id>https://aircjm.github.io/2016/04/22/macbook%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-MacBook-configure-the-development-environment/</id>
    <published>2016-04-22T09:20:22.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>由于误删了OSX的根目录文件导致系统出了问题没有办法正常使用了，所以想重装下系统，虽然OSX已经非常好用了，但是配置过的Macbook更加方便使用。</p><p>这里把对电脑的一些配置记录下来，方便以后重装电脑。（汗）</p><a id="more"></a><p>比较得瑟的升级了OS X的版本到MAC OS Serria，结果就是好像公司的vpn用不了了，我去，所以没有办法只能重装降级版本了。</p><p>记录下如何在新电脑上面如何配置吧。</p><h2 id="brew包管理工具"><a href="#brew包管理工具" class="headerlink" title="brew包管理工具"></a>brew包管理工具</h2><p>使用brew进行软件的管理，之前使用windows的时候特别羡慕在ubuntu下面直接使用apt命令进行安装软件，想装什么一个命令就可以了，特别爽。在OS X下面也有这样的功能。</p><p>这个就是<a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，非常棒的一个应用。</p><p>让你直接通过命令就可以安装软件。</p><p>作为一个Java Developer，目前本机上通过brew安装了</p><ol><li>tomcat</li><li>maven</li><li>gradle</li><li>mysql</li><li>redis</li></ol><p>由于brew不能直接安装jdk，可以通过<code>Homebrew-cask</code>，之前使用过程中老是出现cask安装的软件找不到文件位置，已经弃用<code>Homebrew-cask</code>，除了可以通过brew直接安装的软件通过brew安装之外，其他都是下载*.dmg安装包进行安装的，比较省心，毕竟mac下一个应用就是一个.app文件，没有那么麻烦。</p><p>感觉mac下brew比较厉害的功能，我们在windows下面后有后台进程，在mac下面我们就通过brew来挂载后台服务，例如<code>mysql</code>如果需要后台服务一直启动的话。</p><p>可以先使用brew info mysql来查看下对应的信息。</p><p>可以在输出信息的下面看到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><p>所以可以通过<code>brew services start mysql</code>让他开机就启动一直开启服务。</p><p>也可用通<code>过brew services list</code>查看对应的服务信息。</p><p>例如我的电脑当前就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">⇒  brew services list</span><br><span class="line">Name  Status  User Plist</span><br><span class="line">mysql stopped      </span><br><span class="line">redis stopped</span><br></pre></td></tr></table></figure><p>mysql和redis服务在本机都没有开启服务。</p><p>不知道是电脑问题还是brew服务问题，重装系统之后感觉brew服务贼慢。不折腾了，心累，就这样用吧。</p><p>这些和Linux的软件安装需要根据文档来，毕竟linux更新比较快吧，版本兼容性没有windows做得好。</p><h2 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h2><p>原来的bash用的不是很舒服，还是换成zsh，毕竟说得上是神器吧。</p><p>查看下现在使用的shell</p><p><code>cat /etc/shells</code></p><p>mac下已经默认安装了zsh，可以通过<code>chsh -s /bin/zsh</code>命令来切换zsh，然后重启下终端，也就是重新打开终端。</p><p>有了方天画戟<code>zsh</code>，还需要一匹赤兔马<code>Oh My Zsh</code>，既可以通过brew安装，也可以直接访问官网，通过<a href="http://ohmyz.sh" target="_blank" rel="noopener">官网</a>进行安装。</p><h2 id="zsh插件-autojump"><a href="#zsh插件-autojump" class="headerlink" title="zsh插件-autojump"></a>zsh插件-autojump</h2><p>推荐一款zsh的神器插件，实现快速跳转目录功能，就是一个字快。</p><p>通过brew安装</p><p><code>brew install autojump</code></p><p>通过安装提示在.zshrc文件中进行配置。</p><p>可以通过<code>brew info autojump</code>查看配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Caveats</span><br><span class="line">Add the following line to your ~/.bash_profile or ~/.zshrc file (and remember</span><br><span class="line">to source the file to update your current session):</span><br><span class="line">  [[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line">If you use the Fish shell then add the following line to your ~/.config/fish/config.fish:</span><br><span class="line">  [ -f /usr/local/share/autojump/autojump.fish ]; and source /usr/local/share/autojump/autojump.fish</span><br><span class="line"></span><br><span class="line">zsh completion has been installed to:</span><br><span class="line">  /usr/local/share/zsh/site-functions</span><br></pre></td></tr></table></figure><p>在.zshrc 配置文件中添加这句话，别忘了在zsh使用的插件list加上去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Which plugins would you like to load? (plugins can be found <span class="keyword">in</span> ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(git autojump)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于误删了OSX的根目录文件导致系统出了问题没有办法正常使用了，所以想重装下系统，虽然OSX已经非常好用了，但是配置过的Macbook更加方便使用。&lt;/p&gt;
&lt;p&gt;这里把对电脑的一些配置记录下来，方便以后重装电脑。（汗）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mac" scheme="https://aircjm.github.io/tags/mac/"/>
    
      <category term="配置" scheme="https://aircjm.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux的常用命令详解</title>
    <link href="https://aircjm.github.io/2016/04/18/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://aircjm.github.io/2016/04/18/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2016-04-18T06:24:08.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>记录下常用的linux命令<br><a id="more"></a></p><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><h2 id="基础常用命令"><a href="#基础常用命令" class="headerlink" title="基础常用命令"></a>基础常用命令</h2><p><code>某个命令 --h</code>，对这个命令进行解释<br><code>某个命令 --help</code>，解释这个命令(更详细)<br><code>man 某个命令</code>，文档式解释这个命令(更更详细)(执行该命令后,还可以按/+关键字进行查询结果的搜索)<br><code>Ctrl + c</code>，结束命令<br><code>TAB</code>键，自动补全命令（按一次自动补全，连续按两次，提示所有以输入开头字母的所有命令）<br>键盘上下键，输入临近的历史命令<br><code>history</code>，查看所有的历史命令<br><code>Ctrl + r</code>，进入历史命令的搜索功能模式<br><code>clear</code>，清除屏幕里面的所有命令<br><code>hostname</code>，查看当前登陆用户全名<br><code>pwd</code>，显示当前目录路径（常用）<br><code>firefox&amp;</code>，最后后面的 &amp; 符号，表示使用后台方式打开 <code>firefox</code>，然后显示该进程的 PID 值<br><code>jobs</code>，查看后台运行的程序列表<br><code>ifconfig</code>，查看IP等信息（常用）<br><code>locate</code> 搜索关键字，快速搜索系统文件/文件夹（类似 <code>Windows</code> 上的 <code>everything</code> 索引式搜索）（常用）<br><code>updatedb</code>，配合上面的locate，给locate的索引更新（locate默认是一天更新一次索引）（常用）<br><code>echo &quot;字符串内容&quot;</code>，输出”字符串内容”<br><code>cat 文件路名</code>，显示文件内容（属于打印语句）<br><code>cat -n 文件名</code>，显示文件，并每一行内容都编号<br><code>more 文件名</code>，用分页的方式查看文件内容（按 <code>space</code> 翻下一页，按 <code>Ctrl + B</code> 返回上页）<br><code>less文件名</code>，用分页的方式查看文件内容（带上下翻页）<br>按 <code>j</code> 向下移动，按 <code>k</code> 向上移动<br>按 <code>/</code> 后，输入要查找的字符串内容，可以对文件进行向下查询，如果存在多个结果可以按 <code>n</code> 调到下一个结果出<br>按 <code>？</code> 后，输入要查找的字符串内容，可以对文件进行向上查询，如果存在多个结果可以按 <code>n</code> 调到下一个结果出<br><code>tail -200f 文件名</code>，查看文件被更新的新内容尾200行，如果文件还有在新增可以动态查看到（一般用于查看日记文件）<br><code>df -h</code>，查看磁盘大小和使用空间<br><code>du -sh /opt</code>，查看 opt 这个文件夹大小 （h 的意思 human-readable 用人类可读性较好方式显示，系统会自动调节单位，显示合适大小的单位）<br><code>du -sh ./*</code>，查看当前目录下所有文件夹大小 （h 的意思 human-readable 用人类可读性较好方式显示，系统会自动调节单位，显示合适大小的单位）<br><code>cat /etc/resolv.conf</code>，查看 DNS 设置</p><p><code>mv 文件 目标文件夹</code>，移动文件到目标文件夹<br><code>mv 文件</code>，不指定目录重命名后的名字，用来重命名文件<br><code>touch 文件名</code>，创建一个空白文件/更新已有文件的时间(后者少用)<br><code>mkdir 文件夹名</code>，创建文件夹<br><code>mkdir -p /opt/setups/nginx/conf/</code>，创建一个名为 <code>conf</code> 文件夹，如果它的上级目录 <code>nginx</code> 没有也会跟着一起生成，如果有则跳过</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p><code>su</code>：切换到 root 用户，终端目录还是原来的地方（常用）<br><code>su -</code>：切换到 root 用户，其中 - 号另起一个终端并切换账号<br><code>su 用户名</code>，切换指定用户帐号登陆，终端目录还是原来地方。<br><code>su - 用户名</code>，切换到指定用户帐号登陆，其中 - 号另起一个终端并切换账号<br><code>exit</code>，注销当前用户（常用）<br><code>sudo</code> 某个命令，使用管理员权限使用命令（常用）<br><code>passwd</code>，修改当前用户密码（常用）</p><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p><code>date</code>，查看系统时间（常用）<br><code>date -s20080103</code>，设置日期（常用）<br><code>date -s18:24</code>，设置时间，如果要同时更改 BIOS 时间，再执行 hwclock –systohc（常用）<br><code>cal</code>，在终端中查看日历，肯定没有农历显示的<br><code>uptime</code>，查看系统已经运行了多久，当前有几个用户等信息（常用）</p><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p><code>shutdown -hnow</code>，立即关机<br><code>shutdown -h+10</code>，10分钟后关机<br><code>shutdown -h23:30</code>，23:30关机<br><code>shutdown -rnew</code>，立即重启<br><code>poweroff</code>，立即关机（常用）<br><code>reboot</code>，立即重启（常用）</p><h3 id="zip-tar"><a href="#zip-tar" class="headerlink" title="zip,tar"></a>zip,tar</h3><p><code>zip mytest.zip /opt/test/</code>，把 /opt 目录下的 test/ 目录进行压缩，压缩成一个名叫 mytest 的 zip 文件<br><code>unzip mytest.zip</code>，对 mytest.zip 这个文件进行解压，解压到当前所在目录<br><code>unzip mytest.zip -d /opt/setups/</code>，对 <code>mytest.zip</code> 这个文件进行解压，解压到 <code>/opt/setups/</code> 目录下<br><code>tar -cvf mytest.tar mytest/</code>，对 <code>mytest/</code> 目录进行归档处理（归档和压缩不一样）<br><code>tar -xvf mytest.tar</code>，释放 <code>mytest.tar</code> 这个归档文件，释放到当前目录<br><code>tar -xvf mytest.tar -C /opt/setups/</code>，释放 <code>mytest.tar</code> 这个归档文件，释放到 <code>/opt/setups/</code> 目录下<br><code>last</code>，显示最近登录的帐户及时间<br><code>lastlog</code>，显示系统所有用户各自在最近登录的记录，如果没有登录过的用户会显示 从未登陆过<br><code>du -sh /opt/setups/</code>，显示 <code>/opt/setups/</code> 目录所占硬盘空间大小（s 表示 –summarize 仅显示总计，即当前目录的大小。h 表示 <code>–human-readable</code> 以 <code>KB</code>，<code>MB</code>，<code>GB</code> 为单位，提高信息的可读性）<br><code>chmod 777 文件名</code>，给指定文件增加最高权限。linux 的权限分为 <code>rwx</code>，这三个权限都可以转换成数值表示，<code>r = 4，w = 2，x = 1，- = 0</code>，所以总和是 7，也就是最大权限。第一个 7 是所属主（user）的权限，第二个 7 是所属组（group）的权限，最后一位 7 是非本群组用户（others）的权限。</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><code>ls</code>，列出当前目录下的所有没有隐藏的文件 / 文件夹。<br><code>ls -a</code>，列出包括以．号开头的隐藏文件 / 文件夹（也就是所有文件）<br><code>ls -R</code>，显示出目录下以及其所有子目录的文件 / 文件夹（递归地方式，不显示隐藏的文件）<br><code>ls -a -R</code>，显示出目录下以及其所有子目录的文件 / 文件夹（递归地方式，显示隐藏的文件）<br><code>ls -l</code>，列出目录下所有文件的权限、所有者、文件大小、修改时间及名称（也就是显示详细信息，不显示隐藏文件）。显示出来的效果如下：<br><code>-rwxr-xr-x. 1 root root 4096 3月 26 10:57</code>，最前面的 - 表示这是一个普通文件<br><code>lrwxrwxrwx. 1 root root 4096 3月 26 10:57</code>，最前面的 l 表示这是一个链接文件，类似 <code>Windows</code> 的快捷方式<br><code>drwxr-xr-x. 5 root root 4096 3月 26 10:57</code>，最前面的 d 表示这是一个目录<br><code>ls -ld 目录名</code>，显示该目录的基本信息<br><code>ls -t</code>，依照文件最后修改时间的顺序列出文件名。<br><code>ls -F</code>，列出当前目录下的文件名及其类型。以 / 结尾表示为目录名，以 * 结尾表示为可执行文件，以 @ 结尾表示为符号连接<br><code>ls -lg</code>，同上，并显示出文件的所有者工作组名。<br><code>ls -lh</code>，查看文件夹类文件详细信息，文件大小，文件修改时间<br><code>ls /opt | head -5</code>，显示 <code>opt</code> 目录下前5条记录<br><code>ls -l /opt |grep &quot;^-&quot;|wc -l</code>，统计 opt 目录下文件的个数，不会递归统计<br><code>ls -lR /opt |grep &quot;^-&quot;|wc -l</code>，统计 opt 目录下文件的个数，会递归统计<br><code>ls -l /opt |grep &quot;^d&quot;|wc -l</code>，统计 opt 目录下目录的个数，不会递归统计<br><code>ls -lR /opt |grep &quot;^d&quot;|wc -l</code>，统计 opt 目录下目录的个数，会递归统计<br><code>ls -lR /opt |grep &quot;js&quot;|wc -l</code>，统计 opt 目录下 js 文件的个数，会递归统计</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><code>cd</code>，目录切换<br><code>cd ..</code>，改变目录位置至当前目录的父目录(上级目录)。<br><code>cd ~</code>，改变目录位置至用户登录时的工作目录。<br><code>cd 回车</code>，回到家目录<br><code>cd -</code>，上一个工作目录<br><code>cd dir1/</code>，改变目录位置至 dir1 目录下。<br><code>cd ~user</code>，改变目录位置至用户的工作目录。<br><code>cd ../user</code>，改变目录位置至相对路径user的目录下。<br><code>cd /../..</code>，改变目录位置至绝对路径的目录位置下。</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p><code>cp 源文件 目标文件</code>，复制文件<br><code>cp -r 源文件夹 目标文件夹</code>，复制文件夹<br><code>cp -r -v 源文件夹 目标文件夹</code>，复制文件夹(<code>显示详细信息</code>，一般用于文件夹很大，需要查看复制进度的时候)<br><code>tar cpf - . | tar xpf - -C /opt</code>，复制当前所有文件到 /opt 目录下，一般如果文件夹文件多的情况下用这个更好，用 cp 比较容易出问题</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p><code>rmdir 文件夹名</code>，删除文件夹(只能删除文件夹里面是没有东西的文件夹)<br><code>rm 文件</code>，删除文件<br><code>rm -r 文件夹</code>，删除文件夹<br><code>rm -r -i 文件夹</code>，在删除文件夹里的文件会提示(要的话,在提示后面输入yes)<br><code>rm -r -f 文件夹</code>，强制删除<br><code>rm -r -f 文件夹1/ 文件夹2/ 文件夹3/</code> 删除多个</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>find</code>，高级查找<br><code>find . -name *lin*</code>，其中 . 代表在当前目录找，-name 表示匹配文件名 / 文件夹名，<em>lin</em> 用通配符搜索含有lin的文件或是文件夹<br><code>find . -iname *lin*</code>，其中 . 代表在当前目录找，-iname 表示匹配文件名 / 文件夹名（忽略大小写差异），<em>lin</em> 用通配符搜索含有lin的文件或是文件夹<br><code>find / -name *.conf</code>，其中 / 代表根目录查找，<em>.conf代表搜索后缀会.conf的文件<br><code>find /opt -name .oh-my-zsh</code>，其中 /opt 代表目录名，.oh-my-zsh 代表搜索的是隐藏文件 / 文件夹名字为 oh-my-zsh 的<br><code>find /opt -type f -iname .oh-my-zsh</code>，其中 /opt 代表目录名，-type f 代表只找文件，.oh-my-zsh 代表搜索的是隐藏文件名字为 oh-my-zsh 的<br><code>find /opt -type d -iname .oh-my-zsh</code>，其中 /opt 代表目录名，-type d 代表只找目录，.oh-my-zsh 代表搜索的是隐藏文件夹名字为 oh-my-zsh 的<br>`find . -name “lin</em>“ -execls -l{}\;`，当前目录搜索lin开头的文件，然后用其搜索后的结果集，再执行ls -l的命令（这个命令可变，其他命令也可以），其中 -exec 和 {}\; 都是固定格式</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><table><thead><tr><th>Description</th><th>instruct</th><th>Note</th></tr></thead><tbody><tr><td>复制一行</td><td>yy</td><td></td></tr><tr><td>粘贴</td><td>p</td><td></td></tr><tr><td>删除一行</td><td>dd</td><td></td></tr><tr><td>文章底部</td><td>shift + g</td><td></td></tr><tr><td>文章首部</td><td>gg</td><td></td></tr><tr><td>行首</td><td>0</td><td></td></tr><tr><td>行末</td><td>shift + $</td><td></td></tr><tr><td>下一页</td><td>control + f</td><td></td></tr><tr><td>上一页</td><td>control + b</td><td></td></tr></tbody></table><p>##参考：<br>    <a href="http://wiki.jikexueyuan.com/project/linux-in-eye-of-java/Bash.html" target="_blank" rel="noopener">Bash 常用命令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下常用的linux命令&lt;br&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://aircjm.github.io/tags/java/"/>
    
      <category term="linux" scheme="https://aircjm.github.io/tags/linux/"/>
    
      <category term="回顾" scheme="https://aircjm.github.io/tags/%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用小记</title>
    <link href="https://aircjm.github.io/2016/04/17/hexo%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://aircjm.github.io/2016/04/17/hexo%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</id>
    <published>2016-04-17T13:33:05.000Z</published>
    <updated>2016-06-30T09:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录下如何更好的使用Hexo，以及Hexo的一些配置。</p><h2 id="添加域名绑定功能"><a href="#添加域名绑定功能" class="headerlink" title="添加域名绑定功能"></a>添加域名绑定功能</h2><p>直接在github库中添加CNAME文件，发现每次执行<code>hexo d</code>之后，CNAME文件就被覆盖了，所有直接在库中添加CNAME文件的方式来指定域名是不行的。<br>不能直接在库中添加CNAME文件，就只能在<code>hexo site</code>我们的hexo项目中想办法了，在我们的<code>hexo site</code>中 source文件夹中添加CNAME文件，和在库中添加一样你的域名，之后，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>你就会发现你的CNAME文件已经提交上去了，访问下你的域名看看是不是已经转到你的blog主页了。</p><h2 id="添加README-md"><a href="#添加README-md" class="headerlink" title="添加README.md"></a>添加README.md</h2><p>因为README.md文件会被hexo进行渲染所以会影响我们的使用体验.<br>由于我的hexo的不是部署在master分支上的,所以默认使用的README.md文件是在默认分支根目录下面的,但是有的部署静态页面的分支使用的是master分支,如何在master分支上面添加一个README.md文件呢,<br>在source文件夹下面添加README.md文件,找到hexo项目的配置文件<code>_config.yml</code>找到<code>skip_render:</code>修改为<code>skip_render: README.md</code>.<br>现在重新解析部署提交,登陆远程仓库就能看到READE.md文件的效果了.</p><h2 id="使用markdown插入本地图片"><a href="#使用markdown插入本地图片" class="headerlink" title="使用markdown插入本地图片"></a>使用markdown插入本地图片</h2><p>由于编译后的路径使用的是日期等等,所以为了本地和远程使用都可以使用图片,在source中添加images文件夹,添加一个图片favicon.png,如何使用这个图片呢,<br>在博客里使用这张图片，markdown格式与使用网络图片的格式相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片链接)</span><br></pre></td></tr></table></figure></p><p>在这里，图片链接写入本地路径，就是在这里出现了一些小问题。<br>最开始我写的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../img/favicon.png</span><br></pre></td></tr></table></figure></p><p>但是这样的话使用图片的路径为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:4000/2016/04/17/images/favicon.png</span></span><br></pre></td></tr></table></figure></p><p>所以使用下面的路径来使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](../../../../images/favicon.png)</span><br></pre></td></tr></table></figure></p><p>编译部署,在远程库上查看.<br>再上传之后，发现成功地显示图片了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="http://hugowen.com/post/hexo-insert-local_pictures.html" target="_blank" rel="noopener">hexo使用markdown插入本地图片</a></p><h2 id="遇到的坑-1-页面无法显示，主题文件夹丢失"><a href="#遇到的坑-1-页面无法显示，主题文件夹丢失" class="headerlink" title="遇到的坑-1 页面无法显示，主题文件夹丢失"></a>遇到的坑-1 页面无法显示，主题文件夹丢失</h2><p>本来使用git来进行版本控制的，但是由于使用的主题是Next的git进行检出的，所以我在将hexoBlog项目推送到远程库的时候，并没有将themes下的next文件夹推送到远程库，所以在另一台电脑上进行部署时<code>hexo s</code>,访问blog是空白页，后台报无法找到index.html<br><img src="http://upload-images.jianshu.io/upload_images/1013655-7984585b6921e3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="遇到的坑-1 页面无法显示，主题文件夹丢失图1.png"></p><p>所以建议使用next的时候，去github上下载稳定版本，不进行git checkout拉取代码。</p><p><strong><em><u>update 2016-06-30</u></em></strong></p><h2 id="添加本地搜索（基于Next主题）"><a href="#添加本地搜索（基于Next主题）" class="headerlink" title="添加本地搜索（基于Next主题）"></a>添加本地搜索（基于Next主题）</h2><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li><p>安装 <code>hexo-generator-search</code>，在站点的根目录下执行以下命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-search</span> <span class="bullet">--save</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 站点配置文件<code>_config.yml</code>（不是主题文件夹里面的），新增以下内容到任意位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure></li></ol><p>显示效果：<br><img src="http://upload-images.jianshu.io/upload_images/1013655-d9a7138c9db65fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo添加本地搜索.png"></p><h2 id="添加字数统计插件"><a href="#添加字数统计插件" class="headerlink" title="添加字数统计插件"></a>添加字数统计插件</h2><p>首先在Hexo项目目录下安装：<code>npm install hexo-wordcount --save</code>。</p><p>在footer.swig文件中加入下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"theme-info"</span>&gt;  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="添加文章末尾版权声明"><a href="#添加文章末尾版权声明" class="headerlink" title="添加文章末尾版权声明"></a>添加文章末尾版权声明</h2><p>找到post.swig文件，在footer.post-footer中添加如下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-footer"</span>&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"copyright"</span> style=<span class="string">"clear:both;"</span>&gt;</span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#123;&#123; post.date.format(<span class="string">"YYYY年M月D日 - HH时MM分"</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">           &lt;p&gt;&lt;span&gt;本文字数:&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"page-count"</span>&gt;</span>本文一共有&#123;&#123; wordcount(page.content) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span>&#123;&#123; post.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> &lt;a rel=<span class="string">"license"</span> href=<span class="string">"http://creativecommons.org/licenses/by-nc/4.0/"</span> title=<span class="string">"Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)"</span>&gt;Attribution-NonCommercial <span class="number">4.0</span>&lt;<span class="regexp">/a&gt;&lt;/</span>p&gt;</span><br><span class="line">           &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>转载请保留以上信息。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>footer&gt;</span><br></pre></td></tr></table></figure><p>然后需要修改一下样式，找到<code>themes\next\source\css_common\components\post\post.styl</code>,加入如下样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.post-footer .copyright&#123;  padding-top: <span class="number">1.5</span>em;</span><br><span class="line">  padding-left: <span class="number">1</span>em;  font-size: <span class="number">12</span>px;</span><br><span class="line">  line-height: <span class="number">1</span>em;</span><br><span class="line">  border:1px solid #ccc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考:"></a>参考:</h3><p><a href="http://crossingmay.com/2016/04/20/updatehexo/" target="_blank" rel="noopener">Hexo更新日志</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录下如何更好的使用Hexo，以及Hexo的一些配置。&lt;/p&gt;
&lt;h2 id=&quot;添加域名绑定功能&quot;&gt;&lt;a href=&quot;#添加域名绑定功能&quot; class=&quot;headerlink&quot; title=&quot;添加域名绑定功能&quot;&gt;&lt;/a&gt;添加域名绑定功能&lt;/h2&gt;&lt;p&gt;直接在github库中
      
    
    </summary>
    
    
      <category term="教程" scheme="https://aircjm.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="https://aircjm.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo" scheme="https://aircjm.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://aircjm.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>在win8.1系统下离线安装framework.NET3.5</title>
    <link href="https://aircjm.github.io/2015/07/26/%E5%A6%82%E4%BD%95%E5%9C%A8win8.1%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85framework.NET3.5/"/>
    <id>https://aircjm.github.io/2015/07/26/%E5%A6%82%E4%BD%95%E5%9C%A8win8.1%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85framework.NET3.5/</id>
    <published>2015-07-26T08:28:23.000Z</published>
    <updated>2020-01-21T03:12:55.427Z</updated>
    
    <content type="html"><![CDATA[<p>如何在win8.1系统下离线安装framework.NET3.5？需要镜像文件<br><a id="more"></a></p><h1 id="如何在win8-1系统下离线安装framework-NET3-5？"><a href="#如何在win8-1系统下离线安装framework-NET3-5？" class="headerlink" title="如何在win8.1系统下离线安装framework.NET3.5？"></a>如何在win8.1系统下离线安装framework.NET3.5？</h1><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><pre><code>win8.1的镜像文件</code></pre><h2 id="1-加载win8-1的镜像文件"><a href="#1-加载win8-1的镜像文件" class="headerlink" title="1.加载win8.1的镜像文件"></a>1.加载win8.1的镜像文件</h2><h2 id="2-打开命令提示符（管理员），在上面输入以下命令，然后执行，其中F为镜像文件加载的盘符。"><a href="#2-打开命令提示符（管理员），在上面输入以下命令，然后执行，其中F为镜像文件加载的盘符。" class="headerlink" title="2.打开命令提示符（管理员），在上面输入以下命令，然后执行，其中F为镜像文件加载的盘符。"></a>2.打开命令提示符（管理员），在上面输入以下命令，然后执行，其中F为镜像文件加载的盘符。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable</span>-feature /featurename:NetFX3 /Source:F:\sources\sxs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在win8.1系统下离线安装framework.NET3.5？需要镜像文件&lt;br&gt;
    
    </summary>
    
    
    
      <category term="教程" scheme="https://aircjm.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="win" scheme="https://aircjm.github.io/tags/win/"/>
    
      <category term="应用" scheme="https://aircjm.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
</feed>
